# BSE5304G
T <- seq(from = 5, to = 365, by = 5) 
Solar2 <- function(X, t = T) { 
  out <- matrix(nrow = nrow(X), ncol = length(t), NA)
  for (i in 1:nrow(X)) { 
    out[i, ] <- Solar(lat=X$lat[i],
                      Tx= X$Tx[i],
                      Tn= (X$Tx[i]-X$Trange[i]),
                      albedo= X$albedo[i],
                      slope=X$slope[i],
                      aspect=X$aspect[i],
                      Jday=t
                      ,units="Wm2") 
  } 
  out <- as.data.frame(out) 
  names(out) <- paste("t", t, sep = "") 
  return(out) 
}

n <- 10 
set.seed(1234)
X <- data.frame(lat = runif(n, min = 0, max = pi/3),
                Tx = runif(n, min = 1,max = 40),
                Trange = runif(n, min = 1,max = 10),
                albedo = runif(n, min = 0,max = 1),
                slope = runif(n, min = 0,max = .2),
                aspect = runif(n, min = 0, max = pi*2))
Y <- Solar2(X,t) 
par(cex.axis = 0.7, cex.lab = 0.8)
plot(T, Y[1, ], type = "l", xlab = "Time", ylab = "Population size",
     ylim = c(0, max(Y)))
for (i in 2:n) { 
  lines(T, Y[i, ], type = "l", col = i)
}
X<-expand.grid(Tx = c(5,15,25), 
               Trange = c(2,9,16), 
               slope = c(0.1,0.2,0.3),
               aspect = c(0.1,.5,1.0),
               albedo= c(.1,.5,1.0),
               lat=c(0.1,.77,1.1))
Y<-Solar2(X) ##thispartcanbeperformedoutsideRifnecessary
Solar.seq<-multisensi(design=X,model=Y,reduction=NULL,center=FALSE)
##[*]Analysis+SensitivityIndices
plot(Solar.seq,normalized=TRUE,color=terrain.colors,gsi.plot=FALSE)
title(xlab="Timeinhalf-decades.")
plot(Solar.seq,normalized=FALSE,color=terrain.colors,gsi.plot=FALSE)
title(xlab="Timeinhalf-decades.")

library(multisensi)
Solar.seq <- multisensi(model=Solar2, reduction=NULL, center=FALSE,
                        design.args = list(Tx = c(5,15,25), 
                                           Trange = c(2,9,16), 
                                           slope = c(0.1,0.2,0.3),
                                           aspect = c(0.1,.5,1.0),
                                           albedo= c(.1,.5,1.0),
                                           lat=c(0.1,.77,1.1)))
## [*] Design

Solar.pca <- multisensi(design=X, model=Y, reduction=basis.ACP, scale=FALSE)

plot(Solar.pca, graph = 1)
plot(Solar.pca, graph = 2)
plot(Solar.pca, graph = 3)
library(sensitivity)

m<-10000
Xb<-data.frame(Tx = runif(m, min = 5, max = 30), 
               Trange = runif(m, min = 2,max = 16), 
               slope = runif(m, min = 0.0, max = 0.2),
               aspect = runif(m, min = 0.0, max = 0.2),
               albedo = runif(m, min = 0.0, max = 0.2),
               lat=runif(m, min = 0.0, max = 1.1))
Solar.seq.sobol<-multisensi(design=sobol2007,model=Solar2, 
                            reduction=NULL,analysis=analysis.sensitivity,center=TRUE,
                            design.args=list(X1=Xb[1:(m/2),],X2=Xb[(1+m/2):m,],nboot=100),
                            analysis.args=list(keep.outputs=FALSE))

#
# Note, this is a good time time get a drink of water and/or pee as 
# it is running the function m=10,000 times (a few minutes).
#
print(Solar.seq.sobol, digits = 2)
dev.off()
plot(Solar.seq.sobol, normalized = TRUE, color = terrain.colors)

dev.off()  # this also cleans the graphics device. 
#
# 6.2 With fast99 implemented in the package sensitivity
#
Solar.seq.fast <- multisensi(design = fast99, model = Solar2,
                             center = FALSE, reduction = NULL, analysis = analysis.sensitivity,
                             design.args=list( factors=c("Tx","Trange","slope","albedo","aspect","lat"), 
                                               n=1000, q = "qunif",
                                               q.arg = list(list(min=5, max=30), 
                                                            list(min=2, max=16),
                                                            list(min=0, max=.2),
                                                            list(min=0, max=.2),
                                                            list(min=0, max=.2),
                                                            list(min = 0.0, max = 1.1))),
                             analysis.args=list(keep.outputs=FALSE))

print(Solar.seq.fast,digits=2)
plot(Solar.seq.fast, normalized = TRUE, color = terrain.colors)



PET_fromTemp <- function (Jday, Tmax_C, Tmin_C, lat_radians, AvgT = (Tmax_C + Tmin_C)/2, albedo = 0.18, TerrestEmiss = 0.97, aspect = 0, slope = 0, forest = 0, PTconstant=1.26, AEparams=list(vp=NULL, opt="linear"))
{
  cloudiness <- EstCloudiness(Tmax_C, Tmin_C)
  DailyRad <- NetRad(lat_radians, Jday, Tmax_C, Tmin_C, albedo, forest, slope, aspect, AvgT, cloudiness, TerrestEmiss, AvgT, AEparams=AEparams)
  potentialET <- PTpet(DailyRad, AvgT, PTconstant)
  potentialET[which(potentialET < 0)] <- 0
  potentialET[which(Tmax_C == -999 | Tmin_C == -999)] <- (-999)
  return(potentialET)
}


#PET_fromTemp(Jday, Tmax_C, Tmin_C, lat_radians, AvgT = (Tmax_C + Tmin_C)/2, albedo = 0.18, TerrestEmiss = 0.97, aspect = 0, slope = 0, forest = 0, PTconstant=1.26, AEparams=list(vp=NULL, opt="linear")
#       )
T <- seq(from = 1, to = 365, by = 5)


PET_fromTemp2 <- function(X, tstep = T) { 
  out <- matrix(nrow = nrow(X), ncol = length(tstep), NA)
  for (i in 1:nrow(X)) { 
    out[i, ] <- PET_fromTemp(lat_radians=X$lat_radians[i],
                             Tmax_C= X$Tmax_C[i],
                             Tmin_C= (X$Tmax_C[i]-X$Trange[i]),
                             albedo= X$albedo[i],
                             slope=X$slope[i],
                             aspect=X$aspect[i],
                             Jday=tstep                      ) 
  } 
  out <- as.data.frame(out) 
  names(out) <- paste("tstep", tstep, sep = "") 
  return(out) }

n <- 10 
set.seed(1234)
X <- data.frame(lat_radians = runif(n, min = 0, max = pi/3),
                Tmax_C = runif(n, min = 1,max = 40),
                Trange = runif(n, min = 1,max = 10),
                albedo = runif(n, min = 0,max = 1),
                slope = runif(n, min = 0,max = .2),
                aspect = runif(n, min = 0, max = pi*2))
Y <- PET_fromTemp2(X,tstep=T) 
par(cex.axis = 0.7, cex.lab = 0.8)
plot(T, Y[1, ], type = "l", xlab = "Time", ylab = "Population size",
     ylim = c(0, max(Y)))
for (i in 2:n) { 
  lines(T, Y[i, ], type = "l", col = i)
}
X<-expand.grid(Tmax_C = c(5,15,25), 
               Trange = c(2,9,16), 
               slope = c(0.1,0.2,0.3),
               aspect = c(0.1,.5,1.0),
               albedo= c(.1,.5,1.0),
               lat_radians=c(0.1,.77,1.1))
Y<-PET_fromTemp2(X) ##thispartcanbeperformedoutsideRifnecessary
PET_fromTemp.seq<-multisensi(design=X,model=Y,reduction=NULL,center=FALSE)
##[*]Analysis+SensitivityIndices
plot(PET_fromTemp.seq,normalized=TRUE,color=terrain.colors,gsi.plot=FALSE)
title(xlab="Timeinhalf-decades.")
plot(PET_fromTemp.seq,normalized=FALSE,color=terrain.colors,gsi.plot=FALSE)
title(xlab="Timeinhalf-decades.")

library(multisensi)
PET_fromTemp.seq <- multisensi(model=PET_fromTemp2, reduction=NULL, center=FALSE,
                               design.args = list(Tmax_C = c(5,15,25), 
                                                  Trange = c(2,9,16), 
                                                  slope = c(0.1,0.2,0.3),
                                                  aspect = c(0.1,.5,1.0),
                                                  albedo= c(.1,.5,1.0),
                                                  lat_radians=c(0.1,.77,1.1)))
## [*] Design

PET_fromTemp.pca <- multisensi(design=X, model=Y, reduction=basis.ACP, scale=FALSE)

plot(PET_fromTemp.pca, graph = 1)
plot(PET_fromTemp.pca, graph = 2)
plot(PET_fromTemp.pca, graph = 3)
library(sensitivity)

m<-10000
Xb<-data.frame(Tmax_C = runif(m, min = 5, max = 30), 
               Trange = runif(m, min = 2,max = 16), 
               slope = runif(m, min = 0.0, max = 0.2),
               aspect = runif(m, min = 0.0, max = 0.2),
               albedo = runif(m, min = 0.0, max = 0.2),
               lat_radians=runif(m, min = 0.0, max = 1.1))
PET_fromTemp.seq.sobol<-multisensi(design=sobol2007,model=PET_fromTemp2, 
                                   reduction=NULL,analysis=analysis.sensitivity,center=TRUE,
                                   design.args=list(X1=Xb[1:(m/2),],X2=Xb[(1+m/2):m,],nboot=100),
                                   analysis.args=list(keep.outputs=FALSE))

#
# Note, this is a good time time get a drink of water and/or pee as 
# it is running the function m=10,000 times (a few minutes).
#
print(PET_fromTemp.seq.sobol, digits = 2)
dev.off()
plot(PET_fromTemp.seq.sobol, normalized = TRUE, color = terrain.colors)

dev.off()  # this also cleans the graphics device. 
#
# 6.2 With fast99 implemented in the package sensitivity
#
PET_fromTemp.seq.fast <- multisensi(design = fast99, model = PET_fromTemp2,
                                    center = FALSE, reduction = NULL, analysis = analysis.sensitivity,
                                    design.args=list( factors=c("Tmax_C","Trange","slope","albedo","aspect","lat_radians"), 
                                                      n=1000, q = "qunif",
                                                      q.arg = list(list(min=5, max=30), 
                                                                   list(min=2, max=16),
                                                                   list(min=0, max=.2),
                                                                   list(min=0, max=1),
                                                                   list(min=0, max=.2),
                                                                   list(min = 0.0, max = 1.1))),
                                    analysis.args=list(keep.outputs=FALSE))

print(PET_fromTemp.seq.fast,digits=2)
plot(PET_fromTemp.seq.fast, normalized = TRUE, color = terrain.colors)




T <- seq(from = 1, to = 365, by = 5)


NetRadfunc2 <- function(X, tstep = T) { 
  out <- matrix(nrow = nrow(X), ncol = length(tstep), NA)
  for (i in 1:nrow(X)) { 
    out[i, ] <- NetRadfunc(lat_radians=X$lat_radians[i],
                           Tmax_C= X$Tmax_C[i],
                           Tmin_C= (X$Tmax_C[i]-X$Trange[i]),
                           albedo= X$albedo[i],
                           slope=X$slope[i],
                           aspect=X$aspect[i],
                           Jday=tstep                      ) 
  } 
  out <- as.data.frame(out) 
  names(out) <- paste("t", tstep, sep = "") 
  return(out) }

n <- 10 
set.seed(1234)
X <- data.frame(lat_radians = runif(n, min = 0, max = pi/3),
                Tmax_C = runif(n, min = 1,max = 40),
                Trange = runif(n, min = 1,max = 10),
                albedo = runif(n, min = 0,max = 1),
                slope = runif(n, min = 0,max = .2),
                aspect = runif(n, min = 0, max = pi*2))
Y <- NetRadfunc2(X) 
par(cex.axis = 0.7, cex.lab = 0.8)
plot(T, Y[1, ], type = "l", xlab = "Time", ylab = "Population size",
     ylim = c(0, max(Y)))
for (i in 2:n) { 
  lines(T, Y[i, ], type = "l", col = i)
}
X<-expand.grid(Tmax_C = c(5,15,25), 
               Trange = c(2,9,16), 
               slope = c(0.1,0.2,0.3),
               aspect = c(0.1,.5,1.0),
               albedo= c(.1,.5,1.0),
               lat_radians=c(0.1,.77,1.1))
Y<-NetRadfunc2(X) ##thispartcanbeperformedoutsideRifnecessary
NetRadfunc.seq<-multisensi(design=X,model=Y,reduction=NULL,center=FALSE)
##[*]Analysis+SensitivityIndices
plot(NetRadfunc.seq,normalized=TRUE,color=terrain.colors,gsi.plot=FALSE)
title(xlab="Timeinhalf-decades.")
plot(NetRadfunc.seq,normalized=FALSE,color=terrain.colors,gsi.plot=FALSE)
title(xlab="Timeinhalf-decades.")

library(multisensi)
NetRadfunc.seq <- multisensi(model=NetRadfunc2, reduction=NULL, center=FALSE,
                             design.args = list(Tmax_C = c(5,15,25), 
                                                Trange = c(2,9,16), 
                                                slope = c(0.1,0.2,0.3),
                                                aspect = c(0.1,.5,1.0),
                                                albedo= c(.1,.5,1.0),
                                                lat_radians=c(0.1,.77,1.1)))
## [*] Design

NetRadfunc.pca <- multisensi(design=X, model=Y, reduction=basis.ACP, scale=FALSE)

plot(NetRadfunc.pca, graph = 1)
plot(NetRadfunc.pca, graph = 2)
plot(NetRadfunc.pca, graph = 3)
library(sensitivity)

m<-10000
Xb<-data.frame(Tmax_C = runif(m, min = 5, max = 30), 
               Trange = runif(m, min = 2,max = 16), 
               slope = runif(m, min = 0.0, max = 0.2),
               aspect = runif(m, min = 0.0, max = 0.2),
               albedo = runif(m, min = 0.0, max = 0.2),
               lat_radians=runif(m, min = 0.0, max = 1.1))
NetRadfunc.seq.sobol<-multisensi(design=sobol2007,model=NetRadfunc2, 
                                 reduction=NULL,analysis=analysis.sensitivity,center=TRUE,
                                 design.args=list(X1=Xb[1:(m/2),],X2=Xb[(1+m/2):m,],nboot=100),
                                 analysis.args=list(keep.outputs=FALSE))

#
# Note, this is a good time time get a drink of water and/or pee as 
# it is running the function m=10,000 times (a few minutes).
#
print(NetRadfunc.seq.sobol, digits = 2)
dev.off()
plot(NetRadfunc.seq.sobol, normalized = TRUE, color = terrain.colors)

dev.off()  # this also cleans the graphics device. 
#
# 6.2 With fast99 implemented in the package sensitivity
#
NetRadfunc.seq.fast <- multisensi(design = fast99, model = NetRadfunc2,
                                  center = FALSE, reduction = NULL, analysis = analysis.sensitivity,
                                  design.args=list( factors=c("Tmax_C","Trange","slope","albedo","aspect","lat_radians"), 
                                                    n=1000, q = "qunif",
                                                    q.arg = list(list(min=5, max=30), 
                                                                 list(min=2, max=16),
                                                                 list(min=0, max=.2),
                                                                 list(min=0, max=1),
                                                                 list(min=0, max=.2),
                                                                 list(min = 0.0, max = 1.1))),
                                  analysis.args=list(keep.outputs=FALSE))

print(NetRadfunc.seq.fast,digits=2)
plot(NetRadfunc.seq.fast, normalized = TRUE, color = terrain.colors)


CN <- seq(from =30, to = 90, by = 5)

S=(1000/CN-10)*25.4

SoilStorage2 <- function(X, S_avg=S) { 
  out <- matrix(nrow = nrow(X), ncol = length(S_avg), NA)
  for (i in 1:nrow(X)) { 
    print(X[i,])
    out[i, ] <- SoilStorage(field_capacity = X$field_capacity[i],
                            soil_water_content =X$field_capacity[i]+ X$WC[i],
                            porosity = X$field_capacity[i]+ X$WC[i]+X$PR[i],
                            S_avg=S_avg) 
    print(out[i,])
  } 
  out <- as.data.frame(out) 
  names(out) <- paste("S_avg", S_avg, sep = "") 
  return(out) }

n <- 10 
set.seed(1234)
X <- data.frame(field_capacity = runif(n, min = 0.1,max = .28),
                WC = runif(n, min = 0.02,max = .08),
                PR = runif(n, min = .05,max = .08))

Y <- SoilStorage2(X) 
par(cex.axis = 0.7, cex.lab = 0.8)
plot(S, Y[1, ], type = "l", xlab = "Time", ylab = "Population size",
     ylim = c(0, max(Y)))
for (i in 2:n) { 
  lines(S, Y[i, ], type = "l", col = i)
}
X<-expand.grid(field_capacity = c(.1,.2,.28), 
               WC = c(.02,.05,.08), 
               PR = c(0.05,0.07,0.08))
Y<-SoilStorage2(X) ##thispartcanbeperformedoutsideRifnecessary
SoilStorage.seq<-multisensi(design=X,model=Y,reduction=NULL,center=FALSE)
##[*]Analysis+SensitivityIndices
plot(SoilStorage.seq,normalized=TRUE,color=terrain.colors,gsi.plot=FALSE)
title(xlab="Timeinhalf-decades.")
plot(SoilStorage.seq,normalized=FALSE,color=terrain.colors,gsi.plot=FALSE)
title(xlab="Timeinhalf-decades.")

library(multisensi)
SoilStorage.seq <- multisensi(model=SoilStorage2, reduction=NULL, center=FALSE,
                              design.args = list(Tmax_C = c(5,15,25), 
                                                 Trange = c(2,9,16), 
                                                 slope = c(0.1,0.2,0.3),
                                                 aspect = c(0.1,.5,1.0),
                                                 albedo= c(.1,.5,1.0),
                                                 lat_radians=c(0.1,.77,1.1)))
## [*] Design

SoilStorage.pca <- multisensi(design=X, model=Y, reduction=basis.ACP, scale=FALSE)

plot(SoilStorage.pca, graph = 1)
plot(SoilStorage.pca, graph = 2)
plot(SoilStorage.pca, graph = 3)
library(sensitivity)

m<-10000
Xb<-data.frame(Tmax_C = runif(m, min = 5, max = 30), 
               Trange = runif(m, min = 2,max = 16), 
               slope = runif(m, min = 0.0, max = 0.2),
               aspect = runif(m, min = 0.0, max = 0.2),
               albedo = runif(m, min = 0.0, max = 0.2),
               lat_radians=runif(m, min = 0.0, max = 1.1))
SoilStorage.seq.sobol<-multisensi(design=sobol2007,model=SoilStorage2, 
                                  reduction=NULL,analysis=analysis.sensitivity,center=TRUE,
                                  design.args=list(X1=Xb[1:(m/2),],X2=Xb[(1+m/2):m,],nboot=100),
                                  analysis.args=list(keep.outputs=FALSE))

#
# Note, this is a good time time get a drink of water and/or pee as 
# it is running the function m=10,000 times (a few minutes).
#
print(SoilStorage.seq.sobol, digits = 2)
dev.off()
plot(SoilStorage.seq.sobol, normalized = TRUE, color = terrain.colors)

dev.off()  # this also cleans the graphics device. 
#
# 6.2 With fast99 implemented in the package sensitivity
#
SoilStorage.seq.fast <- multisensi(design = fast99, model = SoilStorage2,
                                   center = FALSE, reduction = NULL, analysis = analysis.sensitivity,
                                   design.args=list( factors=c("Tmax_C","Trange","slope","albedo","aspect","lat_radians"), 
                                                     n=1000, q = "qunif",
                                                     q.arg = list(list(min=5, max=30), 
                                                                  list(min=2, max=16),
                                                                  list(min=0, max=.2),
                                                                  list(min=0, max=1),
                                                                  list(min=0, max=.2),
                                                                  list(min = 0.0, max = 1.1))),
                                   analysis.args=list(keep.outputs=FALSE))

print(SoilStorage.seq.fast,digits=2)
plot(SoilStorage.seq.fast, normalized = TRUE, color = terrain.colors)





